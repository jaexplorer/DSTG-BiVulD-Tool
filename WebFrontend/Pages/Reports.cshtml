@page
@model DatabaseModel
@{
    Layout = "Shared/_MainUI";
    ViewData["Title"] = "Database";
}

@if (!Model.ShowResult)
{
    @if (Model.NumReports == 0)
    {
        <p>No results found!</p>
    }
    else
    {
        <div id="reports-container">
            @for (int i = 0; i < Model.NumReports; i++)
            {

                <div class="report-Element">
                    <div class="report-preview"><h5>Scan ID: @Model.ResultsList[i][0]</h5></div>
                    <div class="report-view"><form method="post"><input type="hidden" asp-for="ResultID" value="@(i + 1)" /><button asp-page-handler="View">View</button></form></div>
                    <div class="report-download"><button>Download</button></div>
                </div>
            }
            </div>
        }
    }
else
{
    <div><button><a href="/Reports">Back</a></button></div>
    <div id="lineChart-container">
        <div id="lineChart">
        </div>
    </div>
    <div id="breakDown-container">
        <div id="breakDownFunction">
            <div id="functionHeading">Function:</div>
            <div id="functionProbability">Vunerablity Probability:</div>
        </div>
        <div id="breakDownHeadings">
            <div id="binaryHeading">Binary</div>
            <div id="assemblyHeading">Assembly</div>
            <div id="recommendationHeading">Recommendation</div>
        </div>
        <div id="binaryBreakDown">
        </div>
        <div id="assemblyBreakDown">
        </div>
        <div id="recommendationBreakDown">
        </div>
    </div>
    <script type="text/javascript">
// Data Visualisation
// ------------------------------------------------------------------- //
	document.onload = makeLineGraph();
	var functionsInfo = grabFunctionInfo();

	function makeLineGraph() {

		// foreach result in the results array
		var chart = document.getElementById('lineChart');
		var marginSize = 3;
		for(var i = 0; i < @Model.Result.Functions.Count; i++)
		{
			// draw an empty bar and then overlay a bar with height equivent to its prob
			chart.appendChild(drawLine(i, (@Model.Probabilities)[i]));

			if (i >= 4 && i <= 6){
				marginSize++;
			}
		}
		var children = chart.children;
		for(var i = 0; i < children.length; i++) {
			// add event listener to each line
			children[i].addEventListener("click", lineClicked);

			// each bar will have a margin to the right, except the last element
			if (i >= children.length - 1) {
				break;
			}
			children[i].style.marginRight = "calc((100% - " + ((8*marginSize)+8) + "px) / "+ marginSize +")";
		}

		// add all the labels
		var chartContainer = document.getElementById('lineChart-container');
		chartContainer.appendChild(createDiv("FP-Heading", "highest probability"));
		chartContainer.appendChild(createDiv("overall-FP-Value", @Model.HighProb.ToString("n2") + "%"));
		chartContainer.appendChild(createDiv("totalFunctionsHeading", "total functions"));
		chartContainer.appendChild(createDiv("totalFunctionsValue", @Model.Result.Functions.Count));
		chartContainer.appendChild(createDiv("totalIssuesHeading", "total issues"));
		chartContainer.appendChild(createDiv("totalIssuesValue", @Model.TotalIssues));
		chartContainer.appendChild(createDiv("timeTakenHeading", "time taken"));
		chartContainer.appendChild(createDiv("timeTaken", "@Model.FormatTime(Model.Result.TimeTaken)"));
	}

	function grabFunctionInfo() {
		var hexInfo = [];
		var asmInfo = [];

		@for (int i = 0; i < Model.Result.Functions.Count; i++)
        {
            foreach (var line in Model.Result.Functions[i].HexCode)
            {
                Model.HighlightedFunctionHexCode += line;
                Model.HighlightedFunctionHexCode += ",";
            }
            Model.HighlightedFunctionHexCode += "-";

            foreach (var line in Model.Result.Functions[i].AsmCode)
            {
                Model.HighlightedFunctionAsmCode += line;
                Model.HighlightedFunctionAsmCode += ",";
            }
            Model.HighlightedFunctionAsmCode += "-";
        }

		var hexCodeByFunction = "@Model.HighlightedFunctionHexCode".split("-");
		var asmCodeByFunction = "@Model.HighlightedFunctionAsmCode".split("-");

		for(var i = 0; i < @Model.Result.Functions.Count; i++)
		{
			hexInfo[i] = hexCodeByFunction[i].split(",");
			asmInfo[i] = asmCodeByFunction[i].split(",");
		}
		var temp = [];
		temp["hex"] = hexInfo;
		temp["asm"] = asmInfo;
		return temp;
	}

	function lineClicked(e) {
		var children = document.getElementById('lineChart').children;
		for(var i = 0; i < children.length; i++) {
			children[i].className = "line";
			if(e.currentTarget == children[i]) {
				makeBreakDownGraph(i);
			}
		}
		e.currentTarget.className += " active";
	}

	function makeBreakDownGraph(id) {
		var breakDownC = document.getElementById('breakDown-container');
		breakDownC.style.display = "block";
		var functionName = document.getElementById('functionHeading');
		var functionProb = document.getElementById('functionProbability');

		functionName.innerHTML = "Function: " + (id +1);
		functionProb.innerHTML = "Vunerablity Probability: " + (@Model.Probabilities)[id] +"%";

		var binaryBreakDown = document.getElementById('binaryBreakDown');
		binaryBreakDown.innerHTML = "";

		for(var i = 0; i < functionsInfo.hex[id].length; i++) {
			binaryBreakDown.innerHTML += i+". "+ functionsInfo.hex[id][i]+"<br />";
		}

		var asmBreakDown = document.getElementById('assemblyBreakDown');
		assemblyBreakDown.innerHTML = "";

		for(var i = 0; i < functionsInfo.asm[id].length; i++) {
			assemblyBreakDown.innerHTML += i+". "+ functionsInfo.asm[id][i]+"<br />";
		}

		var recommendationBreakDown = document.getElementById('recommendationBreakDown');
		recommendationBreakDown.innerHTML = "";
		if ((@Model.Probabilities)[id] > 50) {
			recommendationBreakDown.innerHTML = "The probability of this function is quite vunerable, may require investigation";
		}
	}

	function drawLine(id, value) {
		const SCALE = 2;
		var xmlns = "http://www.w3.org/2000/svg";
		var svg = document.createElementNS(xmlns, "svg");
		svg.setAttributeNS(null,"width","8px");
		svg.setAttributeNS(null,"height",10*SCALE+"rem");

		var emptyLine = document.createElementNS(xmlns, "rect");
		emptyLine.setAttributeNS(null,"x",0);
		emptyLine.setAttributeNS(null,"y",0);
		emptyLine.setAttributeNS(null,"width","8");
		emptyLine.setAttributeNS(null,"height",10*SCALE+"rem");
		emptyLine.setAttributeNS(null,"fill", "rgba(85,85,85, 1)");

		var fill = document.createElementNS(xmlns, "rect");
		fill.setAttributeNS(null,"x",0);
		fill.setAttributeNS(null,"y",((100 - value)/10)*SCALE+"rem");
		fill.setAttributeNS(null,"width","8");
		fill.setAttributeNS(null,"height",(value/10)*SCALE+"rem");
		fill.setAttributeNS(null,"fill", "#f5f5f5");

		svg.appendChild(emptyLine);
		svg.appendChild(fill);

		var temp = document.createElement('div');
		temp.className = "line";
		temp.appendChild(svg);

		return temp;
	}

	function createDiv(id, value) {
		var temp = document.createElement('div');
		temp.id = id;
		temp.innerHTML = value;
		return temp;
	}
    </script>
}


