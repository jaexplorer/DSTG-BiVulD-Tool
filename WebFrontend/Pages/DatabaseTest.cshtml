@page "{handler?}"
@model WebFrontend.Pages.DatabaseTestModel
@{
    ViewData["Title"] = "DatabaseTest";
    Layout = "Shared/_LoginUI";
}
@section scripts{
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
@section Styles{
    <link href="@Href("~/css/login.css")" rel="stylesheet" type="text/css" />
}
<h1>DatabaseTest</h1>
<hr />
<h2>Testing User List</h2>

@if (Model.ErrorMessage != "")
{
    <p>@Model.ErrorMessage</p>
}
@if (Request.Method == "GET")
{
    <table>
        @foreach (string[] user in Model.Users)
        {
            <tr>
                <td>
                    @user[0]
                </td>
                <td>
                    @user[1]
                </td>
            </tr>

        }

    </table>
}
<hr />
<h2>Testing Add User</h2>
@if (Model.Message != "")
{
    <div class="d-flex justify-content-center h-100">
        <p>@Model.Message</p>
    </div>
}
else
{
    <div class="d-flex justify-content-center h-100">
        <div class="card">
            <div class="card-header">
                <h3>Signup</h3>
            </div>
            <div class="card-body">
                <form method="post">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="input-group form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.TestUserModel.Username, new { @class = "control-label" })
                        </div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.TestUserModel.Username, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.TestUserModel.Username, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="input-group form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.TestUserModel.Email)
                        </div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.TestUserModel.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.TestUserModel.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="input-group form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.TestUserModel.Password, new { @class = "control-label" })
                        </div>
                        <div class="col-md-10">
                            @Html.PasswordFor(m => m.TestUserModel.Password, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.TestUserModel.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="input-group form-group">
                        <div class="col-md-8">
                            @Html.LabelFor(m => m.TestUserModel.ConfirmPassword, new { @class = "control-label" })
                        </div>
                        <div class="col-md-10">
                            @Html.PasswordFor(m => m.TestUserModel.ConfirmPassword, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.TestUserModel.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <button asp-page-handler="SignUp" class="btn btn-primary">Sign Up</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

}
<hr />
<h2>Testing Delete User</h2>
@if (Model.ErrorMessage != "")
{
    <p>@Model.ErrorMessage</p>
}
@if (Request.Method == "GET")
{
    <table>
        @foreach (string[] user in Model.Users)
        {
            <tr>
                <td>
                    @user[0]
                </td>
                <td>
                    @user[1]
                </td>
                <td>
                    @user[2]
                </td>
                <td>
                    <form method="post">
                        <input type="hidden" name="TestDeleteUserModel.UserID" value="@user[0]" />
                        <button asp-page-handler="Delete" class="btn btn-primary">Delete</button>
                    </form>
                </td>
            </tr>

        }

    </table>
}
<hr />
<h2>Testing Save Results</h2>
<form method="post">
    <button asp-page-handler="Save" class="btn btn-primary">Save</button>
</form>
<hr />
<h2>Testing Show Results</h2>
@if (Model.ErrorMessage != "")
{
    <p>@Model.ErrorMessage</p>
}
@if (Model.Show == true)
{
    <div id="lineChart-container" style="position: relative; height:auto; width:100%">
        <div style="width: 100%">
            <canvas id="functionsLineGraph" height="60"></canvas>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.js"></script>
    <script type="text/javascript">
// Data Visualisation
// ------------------------------------------------------------------- //
	document.onload = makeLineGraph();

        function makeLineGraph() {
            var ctx = document.getElementById('lineChart-container');
            ctx.appendChild(createDiv("FP-Heading",
                "highest probability"));
            ctx.appendChild(createDiv("overall-FP-Value", @Model.HighProb.ToString("n2") + "%"));
            ctx.appendChild(createDiv("totalFunctionsHeading", "total functions"));
            ctx.appendChild(createDiv("totalIssuesHeading", "total issues"));
            ctx.appendChild(createDiv("totalIssuesValue", @Model.TotalIssues));
            ctx.appendChild(createDiv("totalFunctionsValue", @Model.ShowResult.NumFunctions));
            ctx.appendChild(createDiv("timeTaken", "@Model.FormatTime(Model.ShowResult.TimeTaken)"));


            var lineChart = new Chart(ctx.firstElementChild.firstElementChild, {
                type: 'bar',
                data: {
                    labels: @Model.FunctionAxis,
                    datasets: [
                        {
                            label: "Probability",
                            backgroundColor: '#f5f5f5',
                            hoverBackgroundColor: "#4bbbd9",
                            data: @Model.Probabilities
				},
                    ]
                },
                options: {
                    legend: { display: false },
                    title: {
                        display: false,
                    },
                    scales: {
                        xAxes: [{
                            barThickness: 5,
                            stacked: true,
                            ticks: {
                                display: false,
                                min: 1,
                                max: 100,
                                stepSize: 1,

                            },
                            gridLines: {
                                lineWidth: 4,
                                display: true,
                                offsetGridLines: false,
                                tickMarkLength: 0,
                                drawBorder: false,
                                color: 'rgba(85,85,85, 0.4)',
                                lineWidth: 5
                            },
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 100,
                                display: false,
                            },
                            gridLines: {
                                display: false,
                                color: 'rgba(171,171,171,0)',
                                lineWidth: 1
                            },
                        }],
                    },
                    tooltips: {
                        callbacks: {
                            title: function (tooltipItem) {
                                var title = "Function " + (tooltipItem[0].xLabel);
                                return title;
                            },
                            label: function (tooltipItem, data) {
                                var label = "Vulnerability " + data.datasets[tooltipItem.datasetIndex].label;

                                if (label) {
                                    label += ': ';
                                }
                                label += (Math.round(tooltipItem.yLabel * 100) / 100) + "%";
                                return label;
                            },
                            footer: function (tooltipItem) {
                                var footer = []
						@for (int i = 0; i < Model.ShowResult.NumFunctions; i++)
                        {
                            foreach (var line in Model.ShowResult.Functions[i].HexCode)
                            {
                                Model.HighlightedFunctionCode += line;
                                Model.HighlightedFunctionCode += ",";
                            }
                            Model.HighlightedFunctionCode += "-";
                        }
                                footer.push("Hex");
                                var codeByFunction = "@Model.HighlightedFunctionCode".split("-");
                                var codeByLine = codeByFunction[tooltipItem[0].xLabel - 1].split(",");
                                codeByLine.forEach(function (line) {
                                    footer.push(line);
                                });
                                return footer;
                            }
                        }
                    }
                }
            });
        }
    function createDiv(id, value) {
        var temp = document.createElement('div');
        temp.id = id;
        temp.innerHTML = value;
        return temp;
    }
    </script>

}
@if (Request.Method == "GET")
{
    <table>
        @foreach (string[] user in Model.Results)
        {
            <tr>
                <td>
                    @user[0]
                </td>
                <td>
                    @user[1]
                </td>
                <td>
                    @user[2]
                </td>
                <td>
                    <form method="post">
                        <input type="hidden" name="ShowResultModel.ID" value="@user[0]" />
                        <button asp-page-handler="Show" class="btn btn-primary">Show</button>
                    </form>
                </td>
            </tr>

        }
    </table>

}
@if (Request.Method == "GET")
{
    <hr />
    <h2>Testing Show User</h2>
    <p>@Model.TestUser.Name</p>
    <p>@Model.TestUser.Email</p>
    <p>@Model.TestUser.UserID</p>
    <p>@Model.TestUser.Role</p>
}
<hr />
<h2>Testing Login</h2>
<div class="d-flex justify-content-center h-100">
    <div class="card">
        <div class="card-header">
            <h3>Log In</h3>
        </div>
        <div class="card-body">
            <form method="post">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="input-group form-group">
                    @Html.LabelFor(m => m.TestLoginModel.Username, new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.TestLoginModel.Username, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.TestLoginModel.Username, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group form-group">
                    @Html.LabelFor(m => m.TestLoginModel.Password, new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.PasswordFor(m => m.TestLoginModel.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.TestLoginModel.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button asp-page-handler="LogIn" class="btn btn-primary">Log in</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
