@page "{handler?}"
@model DashboardModel 
@{
	Layout = "Shared/_MainUI";
	ViewData["Title"] = "Dashboard";
}
@if (Model.Display == false)
{
	<h3>No File has been uploaded yet!</h3>
}
else if (Model.Display == true)
{
	<div id="lineChart-container">
		<div id="lineChart-results">
			<div id="lineChart-headings">
				<div id="results-heading">SCAN RESULTS</div>
				<div id="resultsAvg-heading">
					VUNERABLITY AVERAGE
					<div id="resultsAvg-value">@Model.HighProb.ToString("n2")%</div>
				</div>
			</div>
			<div id="lineChart"></div>
		</div>
		<div id="lineChart-summary">
			<div id="summary-heading">SCAN SUMMARY</div>
			<div id="summary-totals">
				<div id="totalFunctionsHeading">
					TOTAL FUNCTIONS
					<div id="totalFunctionsValue">@Model.Results.Functions.Count</div>
				</div>
				<div id="totalIssuesHeading">
					TOTAL ISSUES
					<div id="totalIssuesValue">@Model.TotalIssues</div>
				</div>
				<div id="totalTimeHeading">
					TIME TAKEN
					<div id="totalTimeValue">@Model.FormatTime(Model.Results.TimeTaken)</div>
				</div>
			</div>
		</div>
	</div>

	<div id="breakdown-container" style="display:none;">
		<div id="breakdown-heading">
			<div id="function-heading">FUNCTION #1</div>
			<div id="function-probability-heading">
				VUNERABLITY PROBABILITY 
				<div id="function-probability-value">47.31%</div>
			</div>
		</div>
		<div class="breakdown-containers">
			<div class="output-heading">BINARY</div>
			<div class="breakdown-output"></div>
		</div>
		<div class="breakdown-containers">
			<div class="output-heading">ASSEMBLY</div>
			<div class="breakdown-output"></div>
		</div>
		<div class="breakdown-containers">
			<div class="output-heading">RECOMMENDATION</div>
			<div class="breakdown-output"></div>
		</div>
	</div>


<script type="text/javascript">
// Data Visualisation
// ------------------------------------------------------------------- //
	document.onload = makeLineGraph();
	var functionsInfo = grabFunctionInfo();

	function makeLineGraph() {

		// foreach result in the results array
		var chart = document.getElementById('lineChart');
		var marginSize = 3;
		for(var i = 0; i < @Model.Results.Functions.Count; i++)
		{
			// draw an empty bar and then overlay a bar with height equivent to its prob
			chart.appendChild(drawLine(i, (@Model.Probabilities)[i]));

			if (i >= 4 && i <= 8){
				marginSize++;
			}
		}
		var children = chart.children;
		for(var i = 0; i < children.length; i++) {
			// add event listener to each line
			children[i].addEventListener("click", lineClicked);

			// each bar will have a margin to the right, except the last element
			if (i >= children.length - 1) {
				break;
			}
			children[i].style.marginRight = "calc((100% - " + ((8*marginSize)+8) + "px) / "+ marginSize +")";
		}	
	}

	function grabFunctionInfo() {
		var hexInfo = [];
		var asmInfo = [];

		@for(int i = 0; i < Model.Results.Functions.Count; i++)
		{
			foreach (var line in Model.Results.Functions[i].HexCode)
			{
				Model.HighlightedFunctionHexCode += line;
				Model.HighlightedFunctionHexCode += ",";
			}
			Model.HighlightedFunctionHexCode += "-";

			foreach (var line in Model.Results.Functions[i].AsmCode)
			{
				Model.HighlightedFunctionAsmCode += line;
				Model.HighlightedFunctionAsmCode += ",";
			}
			Model.HighlightedFunctionAsmCode += "-";
		}

		var hexCodeByFunction = "@Model.HighlightedFunctionHexCode".split("-");
		var asmCodeByFunction = "@Model.HighlightedFunctionAsmCode".split("-");

		for(var i = 0; i < @Model.Results.Functions.Count; i++)
		{
			hexInfo[i] = hexCodeByFunction[i].split(",");
			asmInfo[i] = asmCodeByFunction[i].split(",");
		}
		var temp = [];
		temp["hex"] = hexInfo;
		temp["asm"] = asmInfo;
		return temp;
	}
	
	function lineClicked(e) {
		var children = document.getElementById('lineChart').children;
		for(var i = 0; i < children.length; i++) {
			children[i].className = "line";
			if(e.currentTarget == children[i]) {
				makeBreakDownGraph(i);
			}
		}
		e.currentTarget.className += " active";
	}

	function makeBreakDownGraph(id) {
		var breakdownContainer = document.getElementById('breakdown-container');
		breakdownContainer.style.display = "grid";
		var functionHeading = document.getElementById('function-heading');
		var functionProbValue = document.getElementById('function-probability-value');

		functionHeading.innerHTML = "FUNCTION #" + (id +1);
		functionProbValue.innerHTML = ((@Model.Probabilities)[id]).toFixed(2)+"%";

		var breakDownOutputs = document.getElementsByClassName('breakdown-output');
		breakDownOutputs[0].innerHTML = ""; // Hex
		breakDownOutputs[1].innerHTML = ""; // Asm
		breakDownOutputs[2].innerHTML = ""; // Recommendation

		for(var i = 0; i < functionsInfo.hex[id].length; i++) {
			breakDownOutputs[0].innerHTML += i+". "+ functionsInfo.hex[id][i]+"<br />";
		}

		for(var i = 0; i < functionsInfo.asm[id].length; i++) {
			breakDownOutputs[1].innerHTML += i+". "+ functionsInfo.asm[id][i]+"<br />";
		}

		if ((@Model.Probabilities)[id] > 50) {
			breakDownOutputs[2].innerHTML = "The probability of this function is quite vunerable, may require investigation";
		}
	}

	function drawLine(id, value) {
		const SCALE = 9;
		var xmlns = "http://www.w3.org/2000/svg";
		var svg = document.createElementNS(xmlns, "svg");
		svg.setAttributeNS(null,"width","8px");
		svg.setAttributeNS(null,"height",10*SCALE+"%");

		var emptyLine = document.createElementNS(xmlns, "rect");
		emptyLine.setAttributeNS(null,"x",0);
		emptyLine.setAttributeNS(null,"y",0);
		emptyLine.setAttributeNS(null,"width","8");
		emptyLine.setAttributeNS(null,"height",10*SCALE+"%");
		emptyLine.setAttributeNS(null,"fill", "rgba(85,85,85, 1)");

		var fill = document.createElementNS(xmlns, "rect");
		fill.setAttributeNS(null,"x",0);
		fill.setAttributeNS(null,"y",((100 - value)/10)*SCALE+"%");
		fill.setAttributeNS(null,"width","8");
		fill.setAttributeNS(null,"height",(value/10)*SCALE+"%");
		fill.setAttributeNS(null,"fill", "#f5f5f5");

		svg.appendChild(emptyLine);
		svg.appendChild(fill);

		var temp = document.createElement('div');
		temp.className = "line";
		temp.appendChild(svg);

		return temp;
	}
</script>
}
